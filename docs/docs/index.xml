<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on scribbling block</title>
    <link>http://wazatoki.github.io/docs/</link>
    <description>Recent content in Docs on scribbling block</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 10 Oct 2021 01:53:33 +0000</lastBuildDate><atom:link href="http://wazatoki.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python_dependency_management_tool</title>
      <link>http://wazatoki.github.io/docs/python_dependency_management_tool/</link>
      <pubDate>Sun, 10 Oct 2021 01:53:33 +0000</pubDate>
      
      <guid>http://wazatoki.github.io/docs/python_dependency_management_tool/</guid>
      <description>pipenv 新規プロジェクトでPipfileを元にして最新のモジュールをインストールしたい場合。 pipenv install 特定のモジュールをインストールしたい場合 pipenv install モジュール名称 既存のプロジェクトでモジュールを最新化したい場合 pipenv update 新規プロジェクトでPipfile.loc</description>
    </item>
    
    <item>
      <title>Git tips</title>
      <link>http://wazatoki.github.io/docs/git_tips/</link>
      <pubDate>Sun, 10 Oct 2021 10:07:00 +0900</pubDate>
      
      <guid>http://wazatoki.github.io/docs/git_tips/</guid>
      <description>originを変更 git remote set-url origin 変更先のurl リモートブランチ一覧 git branch -r 特定のリモートブランチをclone git clone origin/リモートブランチ名:ローカルブランチ名 サブモジュールを合わせてclone git clone --recursive クローンしたいリポジトリ サブモジュールのcl</description>
    </item>
    
    <item>
      <title>mat dialogから親コンポーネントにデータを送る</title>
      <link>http://wazatoki.github.io/docs/output_data_to_parent_from_angular_dialog/</link>
      <pubDate>Thu, 23 Sep 2021 16:37:35 +0900</pubDate>
      
      <guid>http://wazatoki.github.io/docs/output_data_to_parent_from_angular_dialog/</guid>
      <description>ダイアログを閉じたときにデータを送る ダイアログコンポーネント close() { this.dialogRef.close(data); } constructor( public dialogRef: MatDialogRef&amp;lt;MyDialogComponent&amp;gt;, @Inject(MAT_DIALOG_DATA) public data: DialogData ) { } 親コンポーネント openDialog() { this.dialogRef = this.myDialog.open(MyDialogComponent, { data: {} }); this.dialogRef.afterClosed().subscribe( data =&amp;gt; console.log(&amp;quot;Dialog output:&amp;quot;, data) ); } constructor( private myDialog: MatDialog, ) { } ダイアログを閉じないでデータを送る ダイアログコンポーネント @Output() submitClicked = new EventEmitter&amp;lt;any&amp;gt;(); sendMessageToParent() { const data = &#39;Your data&#39;; this.submitClicked.emit(data); }</description>
    </item>
    
    <item>
      <title>MariaDB/Mysql on docker環境におけるutf8文字化け対策</title>
      <link>http://wazatoki.github.io/docs/dealing_with_garbled_utf8_strings_in_mariadb_and_mysql/</link>
      <pubDate>Mon, 11 Jan 2021 16:51:14 +0900</pubDate>
      
      <guid>http://wazatoki.github.io/docs/dealing_with_garbled_utf8_strings_in_mariadb_and_mysql/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raspberry Pi 4B のWifi設定</title>
      <link>http://wazatoki.github.io/docs/wifi_setting_on_raspberry_pi4b/</link>
      <pubDate>Sun, 10 Jan 2021 17:21:45 +0900</pubDate>
      
      <guid>http://wazatoki.github.io/docs/wifi_setting_on_raspberry_pi4b/</guid>
      <description>wifi 設定 /etc/wpa_supplicant/wpa_supplicant.confにESSIDとwpaキーを設定する。 network={ ssid=&amp;quot;oooo&amp;quot; # ESSID psk=&amp;quot;xxxxxxxxx&amp;quot; # 暗号化キー group=CCMP key_mgmt=WPA-PSK # 暗号化キーの管理方式 priority=2 # 複数のnetworkブロックが定義されている場合の優先順位（大きいほ</description>
    </item>
    
    <item>
      <title>wls2内のubuntuにgoogle chromeをインストールする</title>
      <link>http://wazatoki.github.io/docs/install_google_chrome_in_wsl2_ubuntu/</link>
      <pubDate>Sat, 09 Jan 2021 16:19:14 +0900</pubDate>
      
      <guid>http://wazatoki.github.io/docs/install_google_chrome_in_wsl2_ubuntu/</guid>
      <description>google chromeのインストール sudo apt-get update sudo apt-get install libappindicator1 libappindicator3-1 fonts-liberation curl -O https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome-stable_current_amd64.deb # ここで依存関係のエラーが出るので依存をfixする sudo apt --fix-broken install # もう一度インストール sudo dpkg -i google-chrome-stable_current_amd64.deb angularでユニットテストを行う時の設定 karuma.conf.js browsers: [&#39;Chrome&#39;], customLaunchers: { ChromeHeadlessCI: { base: &#39;ChromeHeadless&#39;, flags: [&#39;--no-sandbox&#39;] } }, テストを実行するときは</description>
    </item>
    
    <item>
      <title>NTPを使ったRaspberry Piの時刻合わせ</title>
      <link>http://wazatoki.github.io/docs/setting_the_time_on_raspberry_pi_using_ntp/</link>
      <pubDate>Wed, 06 Jan 2021 18:53:00 +0900</pubDate>
      
      <guid>http://wazatoki.github.io/docs/setting_the_time_on_raspberry_pi_using_ntp/</guid>
      <description>Raspberry Pi 4 model Bを使って確認しました。 というかsystemd-timesyncdを使っているなら大体同じ。 設定ファイル/etc/systemd/timesyncd.confを修正します。 cd /etc/systemd sudo cp -p timesyncd.conf timesyncd.conf.org sudo vi timesyncd.conf 以下の内容を[Time]の下に追記する。</description>
    </item>
    
    <item>
      <title>hugo開発サーバーへlocalhost外からのアクセス</title>
      <link>http://wazatoki.github.io/docs/access_hugo_server_from_out_of_localhost/</link>
      <pubDate>Sat, 02 Jan 2021 21:45:53 +0900</pubDate>
      
      <guid>http://wazatoki.github.io/docs/access_hugo_server_from_out_of_localhost/</guid>
      <description>hugo server -Dで開発サーバーを起動するとlocalhost外からアクセスできない。 $&amp;gt;hugo server --baseURL=&amp;quot;192.168.0.1&amp;quot; --bind=&amp;quot;192.168.0.1&amp;quot; --port=8080 で起動するとhttp://192.168.0.1:8080でアクセスできる。</description>
    </item>
    
    <item>
      <title>Pylint使用時のインポートエラー対策</title>
      <link>http://wazatoki.github.io/docs/pylint_import_error/</link>
      <pubDate>Sat, 02 Jan 2021 19:00:48 +0900</pubDate>
      
      <guid>http://wazatoki.github.io/docs/pylint_import_error/</guid>
      <description>visual studio codeのpythonプラグインでpylintを使用した時に表示されたimportエラーの対応記録。 workspace.code-workspace に設定記載 &amp;quot;settings&amp;quot;: { &amp;quot;python.linting.pylintPath&amp;quot;: &amp;quot;{path to pylint}&amp;quot;, &amp;quot;python.pipenvPath&amp;quot;: &amp;quot;{path to pipenv}&amp;quot;, &amp;quot;python.pythonPath&amp;quot;: &amp;quot;{path to python}&amp;quot; } pylintrcの設定 pylintrcの生成 $&amp;gt;pylint --generate-rcfile &amp;gt; pylintrc 生成したpylintrcを編集 init-hook=&#39;import sys; sys.path.append(&amp;quot;path to project root</description>
    </item>
    
    <item>
      <title>windows10 &#43; python embeded &#43; visual studio code 環境作成</title>
      <link>http://wazatoki.github.io/docs/create_enviroment_windows10_python_embeded_vscode/</link>
      <pubDate>Sun, 29 Nov 2020 16:41:07 +0900</pubDate>
      
      <guid>http://wazatoki.github.io/docs/create_enviroment_windows10_python_embeded_vscode/</guid>
      <description>配布用にpython embededを利用することを想定して開発環境を作成した際、調べたことの記録です。 ダウンロード 下記のサイトよりダウンロードして適当なフォルダに展開します。 https://www.python.org/downloads/windows/ pipのインストール 下記のサイトよりget-pip.pyをダウン</description>
    </item>
    
  </channel>
</rss>
